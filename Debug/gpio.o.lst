   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 18, 4
  11              		.file	"gpio.c"
  21              	.Ltext0:
  22              		.file 1 "../gpio.c"
 1698              		.align	2
 1699              		.global	portB_conf
 1701              	portB_conf:
 1702              	.LFB0:
   1:../gpio.c     **** ﻿#include "44b.h"
   2:../gpio.c     **** #include "gpio.h"
   3:../gpio.c     **** 
   4:../gpio.c     **** /* Port B interface implementation */
   5:../gpio.c     **** 
   6:../gpio.c     **** int portB_conf(int pin, enum port_mode mode)
   7:../gpio.c     **** {
 1703              		.loc 1 7 0
 1704              		.cfi_startproc
 1705              		@ Function supports interworking.
 1706              		@ args = 0, pretend = 0, frame = 16
 1707              		@ frame_needed = 1, uses_anonymous_args = 0
 1708 0000 0DC0A0E1 		mov	ip, sp
 1709              	.LCFI0:
 1710              		.cfi_def_cfa_register 12
 1711 0004 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1712 0008 04B04CE2 		sub	fp, ip, #4
 1713              		.cfi_offset 14, -8
 1714              		.cfi_offset 13, -12
 1715              		.cfi_offset 11, -16
 1716              	.LCFI1:
 1717              		.cfi_def_cfa 11, 4
 1718 000c 10D04DE2 		sub	sp, sp, #16
 1719 0010 18000BE5 		str	r0, [fp, #-24]
 1720 0014 0130A0E1 		mov	r3, r1
 1721 0018 19304BE5 		strb	r3, [fp, #-25]
   8:../gpio.c     **** 	int ret = 0;
 1722              		.loc 1 8 0
 1723 001c 0030A0E3 		mov	r3, #0
 1724 0020 10300BE5 		str	r3, [fp, #-16]
   9:../gpio.c     **** 	volatile unsigned int x = 0;
 1725              		.loc 1 9 0
 1726 0024 0030A0E3 		mov	r3, #0
 1727 0028 14300BE5 		str	r3, [fp, #-20]
  10:../gpio.c     **** 
  11:../gpio.c     **** 	if (pin < 0 || pin > 10)
 1728              		.loc 1 11 0
 1729 002c 18301BE5 		ldr	r3, [fp, #-24]
 1730 0030 000053E3 		cmp	r3, #0
 1731 0034 020000BA 		blt	.L2
 1732              		.loc 1 11 0 is_stmt 0 discriminator 1
 1733 0038 18301BE5 		ldr	r3, [fp, #-24]
 1734 003c 0A0053E3 		cmp	r3, #10
 1735 0040 010000DA 		ble	.L3
 1736              	.L2:
  12:../gpio.c     **** 		return -1; // indica error
 1737              		.loc 1 12 0 is_stmt 1
 1738 0044 0030E0E3 		mvn	r3, #0
 1739 0048 250000EA 		b	.L4
 1740              	.L3:
  13:../gpio.c     **** 
  14:../gpio.c     **** 	if (mode == SIGOUT){
 1741              		.loc 1 14 0
 1742 004c 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 1743 0050 020053E3 		cmp	r3, #2
 1744 0054 0D00001A 		bne	.L5
  15:../gpio.c     **** 		// COMPLETAR: poner en rPCONB el bit indicado por pin a 1 para que por
  16:../gpio.c     **** 		// dicho pin en el puerto B salga la señal correspondiente del
  17:../gpio.c     **** 		// controlador de memoria
  18:../gpio.c     **** 
  19:../gpio.c     **** 		//rPCONB |= (0x1 << pin);
  20:../gpio.c     **** 		// controlador de memoria
  21:../gpio.c     **** 				x = rPCONB;
 1745              		.loc 1 21 0
 1746 0058 94309FE5 		ldr	r3, .L8
 1747 005c 003093E5 		ldr	r3, [r3, #0]
 1748 0060 14300BE5 		str	r3, [fp, #-20]
  22:../gpio.c     **** 				x = x | (1<<pin);
 1749              		.loc 1 22 0
 1750 0064 0120A0E3 		mov	r2, #1
 1751 0068 18301BE5 		ldr	r3, [fp, #-24]
 1752 006c 1233A0E1 		mov	r3, r2, asl r3
 1753 0070 0320A0E1 		mov	r2, r3
 1754 0074 14301BE5 		ldr	r3, [fp, #-20]
 1755 0078 033082E1 		orr	r3, r2, r3
 1756 007c 14300BE5 		str	r3, [fp, #-20]
  23:../gpio.c     **** 				rPCONB = x;
 1757              		.loc 1 23 0
 1758 0080 6C309FE5 		ldr	r3, .L8
 1759 0084 14201BE5 		ldr	r2, [fp, #-20]
 1760 0088 002083E5 		str	r2, [r3, #0]
 1761 008c 130000EA 		b	.L6
 1762              	.L5:
  24:../gpio.c     **** 
  25:../gpio.c     **** 
  26:../gpio.c     **** 	}else if (mode == OUTPUT){
 1763              		.loc 1 26 0
 1764 0090 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 1765 0094 010053E3 		cmp	r3, #1
 1766 0098 0E00001A 		bne	.L7
  27:../gpio.c     **** 		// COMPLETAR: poner en rPCONB el bit indicado por pin a 0 para que dicho
  28:../gpio.c     **** 		// pin sea un pin de salida
  29:../gpio.c     **** 		//rPCONB &= ~(0x1 << pin);
  30:../gpio.c     **** 
  31:../gpio.c     **** 		x = rPCONB;
 1767              		.loc 1 31 0
 1768 009c 50309FE5 		ldr	r3, .L8
 1769 00a0 003093E5 		ldr	r3, [r3, #0]
 1770 00a4 14300BE5 		str	r3, [fp, #-20]
  32:../gpio.c     **** 		x = x | ~(1<<pin);
 1771              		.loc 1 32 0
 1772 00a8 0120A0E3 		mov	r2, #1
 1773 00ac 18301BE5 		ldr	r3, [fp, #-24]
 1774 00b0 1233A0E1 		mov	r3, r2, asl r3
 1775 00b4 0330E0E1 		mvn	r3, r3
 1776 00b8 0320A0E1 		mov	r2, r3
 1777 00bc 14301BE5 		ldr	r3, [fp, #-20]
 1778 00c0 033082E1 		orr	r3, r2, r3
 1779 00c4 14300BE5 		str	r3, [fp, #-20]
  33:../gpio.c     **** 		rPCONB = x;
 1780              		.loc 1 33 0
 1781 00c8 24309FE5 		ldr	r3, .L8
 1782 00cc 14201BE5 		ldr	r2, [fp, #-20]
 1783 00d0 002083E5 		str	r2, [r3, #0]
 1784 00d4 010000EA 		b	.L6
 1785              	.L7:
  34:../gpio.c     **** 
  35:../gpio.c     **** 
  36:../gpio.c     **** 	}else{
  37:../gpio.c     **** 		ret = -1; // indica error
 1786              		.loc 1 37 0
 1787 00d8 0030E0E3 		mvn	r3, #0
 1788 00dc 10300BE5 		str	r3, [fp, #-16]
 1789              	.L6:
  38:../gpio.c     **** 	}
  39:../gpio.c     **** 	return ret;
 1790              		.loc 1 39 0
 1791 00e0 10301BE5 		ldr	r3, [fp, #-16]
 1792              	.L4:
  40:../gpio.c     **** }
 1793              		.loc 1 40 0
 1794 00e4 0300A0E1 		mov	r0, r3
 1795 00e8 0CD04BE2 		sub	sp, fp, #12
 1796 00ec 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1797 00f0 1EFF2FE1 		bx	lr
 1798              	.L9:
 1799              		.align	2
 1800              	.L8:
 1801 00f4 0800D201 		.word	30539784
 1802              		.cfi_endproc
 1803              	.LFE0:
 1805              		.align	2
 1806              		.global	portB_write
 1808              	portB_write:
 1809              	.LFB1:
  41:../gpio.c     **** 
  42:../gpio.c     **** int portB_write(int pin, enum digital val)
  43:../gpio.c     **** {
 1810              		.loc 1 43 0
 1811              		.cfi_startproc
 1812              		@ Function supports interworking.
 1813              		@ args = 0, pretend = 0, frame = 16
 1814              		@ frame_needed = 1, uses_anonymous_args = 0
 1815 00f8 0DC0A0E1 		mov	ip, sp
 1816              	.LCFI2:
 1817              		.cfi_def_cfa_register 12
 1818 00fc 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1819 0100 04B04CE2 		sub	fp, ip, #4
 1820              		.cfi_offset 14, -8
 1821              		.cfi_offset 13, -12
 1822              		.cfi_offset 11, -16
 1823              	.LCFI3:
 1824              		.cfi_def_cfa 11, 4
 1825 0104 10D04DE2 		sub	sp, sp, #16
 1826 0108 18000BE5 		str	r0, [fp, #-24]
 1827 010c 0130A0E1 		mov	r3, r1
 1828 0110 19304BE5 		strb	r3, [fp, #-25]
  44:../gpio.c     **** 	volatile unsigned int x = 0;
 1829              		.loc 1 44 0
 1830 0114 0030A0E3 		mov	r3, #0
 1831 0118 10300BE5 		str	r3, [fp, #-16]
  45:../gpio.c     **** 
  46:../gpio.c     **** 	if (pin < 0 || pin > 10)
 1832              		.loc 1 46 0
 1833 011c 18301BE5 		ldr	r3, [fp, #-24]
 1834 0120 000053E3 		cmp	r3, #0
 1835 0124 020000BA 		blt	.L11
 1836              		.loc 1 46 0 is_stmt 0 discriminator 1
 1837 0128 18301BE5 		ldr	r3, [fp, #-24]
 1838 012c 0A0053E3 		cmp	r3, #10
 1839 0130 010000DA 		ble	.L12
 1840              	.L11:
  47:../gpio.c     **** 		return -1; // indica error
 1841              		.loc 1 47 0 is_stmt 1
 1842 0134 0030E0E3 		mvn	r3, #0
 1843 0138 240000EA 		b	.L13
 1844              	.L12:
  48:../gpio.c     **** 
  49:../gpio.c     **** 	if (val < 0 || val > 1)
 1845              		.loc 1 49 0
 1846 013c 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 1847 0140 010053E3 		cmp	r3, #1
 1848 0144 0100009A 		bls	.L14
  50:../gpio.c     **** 		return -1; // indica error
 1849              		.loc 1 50 0
 1850 0148 0030E0E3 		mvn	r3, #0
 1851 014c 1F0000EA 		b	.L13
 1852              	.L14:
  51:../gpio.c     **** 
  52:../gpio.c     **** 	if (val){
 1853              		.loc 1 52 0
 1854 0150 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 1855 0154 000053E3 		cmp	r3, #0
 1856 0158 0D00000A 		beq	.L15
  53:../gpio.c     **** 		// COMPLETAR: poner en rPDATB el bit indicado por pin a 1
  54:../gpio.c     **** 		//rPDATB |= (0x1 << pin);
  55:../gpio.c     **** 		x = rPDATB;
 1857              		.loc 1 55 0
 1858 015c 7C309FE5 		ldr	r3, .L17
 1859 0160 003093E5 		ldr	r3, [r3, #0]
 1860 0164 10300BE5 		str	r3, [fp, #-16]
  56:../gpio.c     **** 		x = x | (1<<pin);
 1861              		.loc 1 56 0
 1862 0168 0120A0E3 		mov	r2, #1
 1863 016c 18301BE5 		ldr	r3, [fp, #-24]
 1864 0170 1233A0E1 		mov	r3, r2, asl r3
 1865 0174 0320A0E1 		mov	r2, r3
 1866 0178 10301BE5 		ldr	r3, [fp, #-16]
 1867 017c 033082E1 		orr	r3, r2, r3
 1868 0180 10300BE5 		str	r3, [fp, #-16]
  57:../gpio.c     **** 		rPDATB = x;
 1869              		.loc 1 57 0
 1870 0184 54309FE5 		ldr	r3, .L17
 1871 0188 10201BE5 		ldr	r2, [fp, #-16]
 1872 018c 002083E5 		str	r2, [r3, #0]
 1873 0190 0D0000EA 		b	.L16
 1874              	.L15:
  58:../gpio.c     **** 
  59:../gpio.c     **** 	}else{
  60:../gpio.c     **** 		// COMPLETAR: poner en rPDATB el bit indicado por pin a 0
  61:../gpio.c     **** 		//rPDATB |= ~(0x1 << pin);
  62:../gpio.c     **** 		x = rPDATB;
 1875              		.loc 1 62 0
 1876 0194 44309FE5 		ldr	r3, .L17
 1877 0198 003093E5 		ldr	r3, [r3, #0]
 1878 019c 10300BE5 		str	r3, [fp, #-16]
  63:../gpio.c     **** 		x = x & ~(1<<pin);
 1879              		.loc 1 63 0
 1880 01a0 0120A0E3 		mov	r2, #1
 1881 01a4 18301BE5 		ldr	r3, [fp, #-24]
 1882 01a8 1233A0E1 		mov	r3, r2, asl r3
 1883 01ac 0330E0E1 		mvn	r3, r3
 1884 01b0 0320A0E1 		mov	r2, r3
 1885 01b4 10301BE5 		ldr	r3, [fp, #-16]
 1886 01b8 033002E0 		and	r3, r2, r3
 1887 01bc 10300BE5 		str	r3, [fp, #-16]
  64:../gpio.c     **** 		rPDATB = x;
 1888              		.loc 1 64 0
 1889 01c0 18309FE5 		ldr	r3, .L17
 1890 01c4 10201BE5 		ldr	r2, [fp, #-16]
 1891 01c8 002083E5 		str	r2, [r3, #0]
 1892              	.L16:
  65:../gpio.c     **** 
  66:../gpio.c     **** 	}
  67:../gpio.c     **** 	return 0;
 1893              		.loc 1 67 0
 1894 01cc 0030A0E3 		mov	r3, #0
 1895              	.L13:
  68:../gpio.c     **** }
 1896              		.loc 1 68 0
 1897 01d0 0300A0E1 		mov	r0, r3
 1898 01d4 0CD04BE2 		sub	sp, fp, #12
 1899 01d8 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1900 01dc 1EFF2FE1 		bx	lr
 1901              	.L18:
 1902              		.align	2
 1903              	.L17:
 1904 01e0 0C00D201 		.word	30539788
 1905              		.cfi_endproc
 1906              	.LFE1:
 1908              		.align	2
 1909              		.global	portG_conf
 1911              	portG_conf:
 1912              	.LFB2:
  69:../gpio.c     **** 
  70:../gpio.c     **** /* Port G interface implementation */
  71:../gpio.c     **** 
  72:../gpio.c     **** int portG_conf(int pin, enum port_mode mode)
  73:../gpio.c     **** {
 1913              		.loc 1 73 0
 1914              		.cfi_startproc
 1915              		@ Function supports interworking.
 1916              		@ args = 0, pretend = 0, frame = 16
 1917              		@ frame_needed = 1, uses_anonymous_args = 0
 1918 01e4 0DC0A0E1 		mov	ip, sp
 1919              	.LCFI4:
 1920              		.cfi_def_cfa_register 12
 1921 01e8 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1922 01ec 04B04CE2 		sub	fp, ip, #4
 1923              		.cfi_offset 14, -8
 1924              		.cfi_offset 13, -12
 1925              		.cfi_offset 11, -16
 1926              	.LCFI5:
 1927              		.cfi_def_cfa 11, 4
 1928 01f0 10D04DE2 		sub	sp, sp, #16
 1929 01f4 18000BE5 		str	r0, [fp, #-24]
 1930 01f8 0130A0E1 		mov	r3, r1
 1931 01fc 19304BE5 		strb	r3, [fp, #-25]
  74:../gpio.c     **** 	int pos = pin*2;
 1932              		.loc 1 74 0
 1933 0200 18301BE5 		ldr	r3, [fp, #-24]
 1934 0204 8330A0E1 		mov	r3, r3, asl #1
 1935 0208 10300BE5 		str	r3, [fp, #-16]
  75:../gpio.c     **** 	volatile unsigned int x = 0;
 1936              		.loc 1 75 0
 1937 020c 0030A0E3 		mov	r3, #0
 1938 0210 14300BE5 		str	r3, [fp, #-20]
  76:../gpio.c     **** 
  77:../gpio.c     **** 
  78:../gpio.c     **** 	if (pin < 0 || pin > 7)
 1939              		.loc 1 78 0
 1940 0214 18301BE5 		ldr	r3, [fp, #-24]
 1941 0218 000053E3 		cmp	r3, #0
 1942 021c 020000BA 		blt	.L20
 1943              		.loc 1 78 0 is_stmt 0 discriminator 1
 1944 0220 18301BE5 		ldr	r3, [fp, #-24]
 1945 0224 070053E3 		cmp	r3, #7
 1946 0228 010000DA 		ble	.L21
 1947              	.L20:
  79:../gpio.c     **** 		return -1; // indica error
 1948              		.loc 1 79 0 is_stmt 1
 1949 022c 0030E0E3 		mvn	r3, #0
 1950 0230 5C0000EA 		b	.L22
 1951              	.L21:
  80:../gpio.c     **** 
  81:../gpio.c     **** 	switch (mode) {
 1952              		.loc 1 81 0
 1953 0234 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 1954 0238 030053E3 		cmp	r3, #3
 1955 023c 03F19F97 		ldrls	pc, [pc, r3, asl #2]
 1956 0240 550000EA 		b	.L23
 1957              	.L28:
 1958 0244 54020000 		.word	.L24
 1959 0248 98020000 		.word	.L25
 1960 024c F0020000 		.word	.L26
 1961 0250 48030000 		.word	.L27
 1962              	.L24:
  82:../gpio.c     **** 		case INPUT:
  83:../gpio.c     **** 			// COMPLETAR: poner en rPCONG 00 a partir de la posición pos para
  84:../gpio.c     **** 			// configurar como pin de entrada el pin indicado por el parámetro pin
  85:../gpio.c     **** 			//Osu dice: rPCONG 00
  86:../gpio.c     **** 
  87:../gpio.c     **** //			rPCONG &= ~(0x1 << pos);
  88:../gpio.c     **** 	//		rPCONG &= ~(0x1 << (pos + 1));
  89:../gpio.c     **** 
  90:../gpio.c     **** 			x = rPCONG;
 1963              		.loc 1 90 0
 1964 0254 5C319FE5 		ldr	r3, .L30
 1965 0258 003093E5 		ldr	r3, [r3, #0]
 1966 025c 14300BE5 		str	r3, [fp, #-20]
  91:../gpio.c     **** 			x = x & ~(3<<pos);
 1967              		.loc 1 91 0
 1968 0260 0320A0E3 		mov	r2, #3
 1969 0264 10301BE5 		ldr	r3, [fp, #-16]
 1970 0268 1233A0E1 		mov	r3, r2, asl r3
 1971 026c 0330E0E1 		mvn	r3, r3
 1972 0270 0320A0E1 		mov	r2, r3
 1973 0274 14301BE5 		ldr	r3, [fp, #-20]
 1974 0278 033002E0 		and	r3, r2, r3
 1975 027c 14300BE5 		str	r3, [fp, #-20]
  92:../gpio.c     **** 			x = x | (0<<pos);
 1976              		.loc 1 92 0
 1977 0280 14301BE5 		ldr	r3, [fp, #-20]
 1978 0284 14300BE5 		str	r3, [fp, #-20]
  93:../gpio.c     **** 			rPCONG = x;
 1979              		.loc 1 93 0
 1980 0288 28319FE5 		ldr	r3, .L30
 1981 028c 14201BE5 		ldr	r2, [fp, #-20]
 1982 0290 002083E5 		str	r2, [r3, #0]
  94:../gpio.c     **** 
  95:../gpio.c     **** 			break;
 1983              		.loc 1 95 0
 1984 0294 420000EA 		b	.L29
 1985              	.L25:
  96:../gpio.c     **** 		case OUTPUT:
  97:../gpio.c     **** 			// COMPLETAR: poner en rPCONG 01 a partir de la posición pos para
  98:../gpio.c     **** 			// configurar como pin de salida el pin indicado por el parámetro pin
  99:../gpio.c     **** 			//Osu dice: rPCONG 01
 100:../gpio.c     **** 			//rPCONG |= ~(0x1 << pos);
 101:../gpio.c     **** 			//rPCONG &= ~(0x1 << (pos + 1));
 102:../gpio.c     **** 
 103:../gpio.c     **** 			x = rPCONG;
 1986              		.loc 1 103 0
 1987 0298 18319FE5 		ldr	r3, .L30
 1988 029c 003093E5 		ldr	r3, [r3, #0]
 1989 02a0 14300BE5 		str	r3, [fp, #-20]
 104:../gpio.c     **** 			x = x & ~(3<<pos);
 1990              		.loc 1 104 0
 1991 02a4 0320A0E3 		mov	r2, #3
 1992 02a8 10301BE5 		ldr	r3, [fp, #-16]
 1993 02ac 1233A0E1 		mov	r3, r2, asl r3
 1994 02b0 0330E0E1 		mvn	r3, r3
 1995 02b4 0320A0E1 		mov	r2, r3
 1996 02b8 14301BE5 		ldr	r3, [fp, #-20]
 1997 02bc 033002E0 		and	r3, r2, r3
 1998 02c0 14300BE5 		str	r3, [fp, #-20]
 105:../gpio.c     **** 			x = x | (1<<pos);
 1999              		.loc 1 105 0
 2000 02c4 0120A0E3 		mov	r2, #1
 2001 02c8 10301BE5 		ldr	r3, [fp, #-16]
 2002 02cc 1233A0E1 		mov	r3, r2, asl r3
 2003 02d0 0320A0E1 		mov	r2, r3
 2004 02d4 14301BE5 		ldr	r3, [fp, #-20]
 2005 02d8 033082E1 		orr	r3, r2, r3
 2006 02dc 14300BE5 		str	r3, [fp, #-20]
 106:../gpio.c     **** 			rPCONG = x;
 2007              		.loc 1 106 0
 2008 02e0 D0309FE5 		ldr	r3, .L30
 2009 02e4 14201BE5 		ldr	r2, [fp, #-20]
 2010 02e8 002083E5 		str	r2, [r3, #0]
 107:../gpio.c     **** 
 108:../gpio.c     **** 			break;
 2011              		.loc 1 108 0
 2012 02ec 2C0000EA 		b	.L29
 2013              	.L26:
 109:../gpio.c     **** 		case SIGOUT:
 110:../gpio.c     **** 			// COMPLETAR: poner en rPCONG 10 a partir de la posición pos para
 111:../gpio.c     **** 			// que salga la señal interna correspondiente por el pin indicado
 112:../gpio.c     **** 			// por el parámetro pin
 113:../gpio.c     **** 			//Osu dice: rPCONG 10
 114:../gpio.c     **** 		//	rPCONG &= ~(0x1 << pos);
 115:../gpio.c     **** 			//rPCONG |= ~(0x1 << (pos + 1));
 116:../gpio.c     **** 
 117:../gpio.c     **** 			x = rPCONG;
 2014              		.loc 1 117 0
 2015 02f0 C0309FE5 		ldr	r3, .L30
 2016 02f4 003093E5 		ldr	r3, [r3, #0]
 2017 02f8 14300BE5 		str	r3, [fp, #-20]
 118:../gpio.c     **** 			x = x | (1<<pos);
 2018              		.loc 1 118 0
 2019 02fc 0120A0E3 		mov	r2, #1
 2020 0300 10301BE5 		ldr	r3, [fp, #-16]
 2021 0304 1233A0E1 		mov	r3, r2, asl r3
 2022 0308 0320A0E1 		mov	r2, r3
 2023 030c 14301BE5 		ldr	r3, [fp, #-20]
 2024 0310 033082E1 		orr	r3, r2, r3
 2025 0314 14300BE5 		str	r3, [fp, #-20]
 119:../gpio.c     **** 			x = x & ~(3<<pos);
 2026              		.loc 1 119 0
 2027 0318 0320A0E3 		mov	r2, #3
 2028 031c 10301BE5 		ldr	r3, [fp, #-16]
 2029 0320 1233A0E1 		mov	r3, r2, asl r3
 2030 0324 0330E0E1 		mvn	r3, r3
 2031 0328 0320A0E1 		mov	r2, r3
 2032 032c 14301BE5 		ldr	r3, [fp, #-20]
 2033 0330 033002E0 		and	r3, r2, r3
 2034 0334 14300BE5 		str	r3, [fp, #-20]
 120:../gpio.c     **** 			rPCONG = x;
 2035              		.loc 1 120 0
 2036 0338 78309FE5 		ldr	r3, .L30
 2037 033c 14201BE5 		ldr	r2, [fp, #-20]
 2038 0340 002083E5 		str	r2, [r3, #0]
 121:../gpio.c     **** 
 122:../gpio.c     **** 			break;
 2039              		.loc 1 122 0
 2040 0344 160000EA 		b	.L29
 2041              	.L27:
 123:../gpio.c     **** 		case EINT:
 124:../gpio.c     **** 			// COMPLETAR: poner en rPCONG 11 a partir de la posición pos para
 125:../gpio.c     **** 			// habilitar la generación de interrupciones externas por el pin
 126:../gpio.c     **** 			// indicado por el parámetro pin
 127:../gpio.c     **** 			//Osu dice: rPCONG 11
 128:../gpio.c     **** 			//rPCONG |= ~(0x1 << pos);
 129:../gpio.c     **** 		//	rPCONG |= ~(0x1 << (pos + 1));
 130:../gpio.c     **** 
 131:../gpio.c     **** 			x = rPCONG;
 2042              		.loc 1 131 0
 2043 0348 68309FE5 		ldr	r3, .L30
 2044 034c 003093E5 		ldr	r3, [r3, #0]
 2045 0350 14300BE5 		str	r3, [fp, #-20]
 132:../gpio.c     **** 			x = x | (1<<pos);
 2046              		.loc 1 132 0
 2047 0354 0120A0E3 		mov	r2, #1
 2048 0358 10301BE5 		ldr	r3, [fp, #-16]
 2049 035c 1233A0E1 		mov	r3, r2, asl r3
 2050 0360 0320A0E1 		mov	r2, r3
 2051 0364 14301BE5 		ldr	r3, [fp, #-20]
 2052 0368 033082E1 		orr	r3, r2, r3
 2053 036c 14300BE5 		str	r3, [fp, #-20]
 133:../gpio.c     **** 			x = x | (1<<pos);
 2054              		.loc 1 133 0
 2055 0370 0120A0E3 		mov	r2, #1
 2056 0374 10301BE5 		ldr	r3, [fp, #-16]
 2057 0378 1233A0E1 		mov	r3, r2, asl r3
 2058 037c 0320A0E1 		mov	r2, r3
 2059 0380 14301BE5 		ldr	r3, [fp, #-20]
 2060 0384 033082E1 		orr	r3, r2, r3
 2061 0388 14300BE5 		str	r3, [fp, #-20]
 134:../gpio.c     **** 		    rPCONG = x;
 2062              		.loc 1 134 0
 2063 038c 24309FE5 		ldr	r3, .L30
 2064 0390 14201BE5 		ldr	r2, [fp, #-20]
 2065 0394 002083E5 		str	r2, [r3, #0]
 135:../gpio.c     **** 
 136:../gpio.c     **** 			break;
 2066              		.loc 1 136 0
 2067 0398 010000EA 		b	.L29
 2068              	.L23:
 137:../gpio.c     **** 		default:
 138:../gpio.c     **** 			return -1;
 2069              		.loc 1 138 0
 2070 039c 0030E0E3 		mvn	r3, #0
 2071 03a0 000000EA 		b	.L22
 2072              	.L29:
 139:../gpio.c     **** 	}
 140:../gpio.c     **** 
 141:../gpio.c     **** 	return 0;
 2073              		.loc 1 141 0
 2074 03a4 0030A0E3 		mov	r3, #0
 2075              	.L22:
 142:../gpio.c     **** }
 2076              		.loc 1 142 0
 2077 03a8 0300A0E1 		mov	r0, r3
 2078 03ac 0CD04BE2 		sub	sp, fp, #12
 2079 03b0 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2080 03b4 1EFF2FE1 		bx	lr
 2081              	.L31:
 2082              		.align	2
 2083              	.L30:
 2084 03b8 4000D201 		.word	30539840
 2085              		.cfi_endproc
 2086              	.LFE2:
 2088              		.align	2
 2089              		.global	portG_eint_trig
 2091              	portG_eint_trig:
 2092              	.LFB3:
 143:../gpio.c     **** 
 144:../gpio.c     **** int portG_eint_trig(int pin, enum trigger trig)
 145:../gpio.c     **** {
 2093              		.loc 1 145 0
 2094              		.cfi_startproc
 2095              		@ Function supports interworking.
 2096              		@ args = 0, pretend = 0, frame = 8
 2097              		@ frame_needed = 1, uses_anonymous_args = 0
 2098 03bc 0DC0A0E1 		mov	ip, sp
 2099              	.LCFI6:
 2100              		.cfi_def_cfa_register 12
 2101 03c0 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2102 03c4 04B04CE2 		sub	fp, ip, #4
 2103              		.cfi_offset 14, -8
 2104              		.cfi_offset 13, -12
 2105              		.cfi_offset 11, -16
 2106              	.LCFI7:
 2107              		.cfi_def_cfa 11, 4
 2108 03c8 08D04DE2 		sub	sp, sp, #8
 2109 03cc 10000BE5 		str	r0, [fp, #-16]
 2110 03d0 0130A0E1 		mov	r3, r1
 2111 03d4 11304BE5 		strb	r3, [fp, #-17]
 146:../gpio.c     **** 	// A COMPLETAR EN LA SEGUNDA PARTE DE LA PRÁCTICA
 147:../gpio.c     **** 	return 0;
 2112              		.loc 1 147 0
 2113 03d8 0030A0E3 		mov	r3, #0
 148:../gpio.c     **** }
 2114              		.loc 1 148 0
 2115 03dc 0300A0E1 		mov	r0, r3
 2116 03e0 0CD04BE2 		sub	sp, fp, #12
 2117 03e4 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2118 03e8 1EFF2FE1 		bx	lr
 2119              		.cfi_endproc
 2120              	.LFE3:
 2122              		.align	2
 2123              		.global	portG_write
 2125              	portG_write:
 2126              	.LFB4:
 149:../gpio.c     **** 
 150:../gpio.c     **** int portG_write(int pin, enum digital val)
 151:../gpio.c     **** {
 2127              		.loc 1 151 0
 2128              		.cfi_startproc
 2129              		@ Function supports interworking.
 2130              		@ args = 0, pretend = 0, frame = 16
 2131              		@ frame_needed = 1, uses_anonymous_args = 0
 2132 03ec 0DC0A0E1 		mov	ip, sp
 2133              	.LCFI8:
 2134              		.cfi_def_cfa_register 12
 2135 03f0 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2136 03f4 04B04CE2 		sub	fp, ip, #4
 2137              		.cfi_offset 14, -8
 2138              		.cfi_offset 13, -12
 2139              		.cfi_offset 11, -16
 2140              	.LCFI9:
 2141              		.cfi_def_cfa 11, 4
 2142 03f8 10D04DE2 		sub	sp, sp, #16
 2143 03fc 18000BE5 		str	r0, [fp, #-24]
 2144 0400 0130A0E1 		mov	r3, r1
 2145 0404 19304BE5 		strb	r3, [fp, #-25]
 152:../gpio.c     **** 	int pos = pin*2;
 2146              		.loc 1 152 0
 2147 0408 18301BE5 		ldr	r3, [fp, #-24]
 2148 040c 8330A0E1 		mov	r3, r3, asl #1
 2149 0410 10300BE5 		str	r3, [fp, #-16]
 153:../gpio.c     **** 	volatile unsigned int x = 0;
 2150              		.loc 1 153 0
 2151 0414 0030A0E3 		mov	r3, #0
 2152 0418 14300BE5 		str	r3, [fp, #-20]
 154:../gpio.c     **** 
 155:../gpio.c     **** 	if (pin < 0 || pin > 7)
 2153              		.loc 1 155 0
 2154 041c 18301BE5 		ldr	r3, [fp, #-24]
 2155 0420 000053E3 		cmp	r3, #0
 2156 0424 020000BA 		blt	.L34
 2157              		.loc 1 155 0 is_stmt 0 discriminator 1
 2158 0428 18301BE5 		ldr	r3, [fp, #-24]
 2159 042c 070053E3 		cmp	r3, #7
 2160 0430 010000DA 		ble	.L35
 2161              	.L34:
 156:../gpio.c     **** 		return -1; // indica error
 2162              		.loc 1 156 0 is_stmt 1
 2163 0434 0030E0E3 		mvn	r3, #0
 2164 0438 300000EA 		b	.L36
 2165              	.L35:
 157:../gpio.c     **** 
 158:../gpio.c     **** 	if (val < 0 || val > 1)
 2166              		.loc 1 158 0
 2167 043c 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 2168 0440 010053E3 		cmp	r3, #1
 2169 0444 0100009A 		bls	.L37
 159:../gpio.c     **** 		return -1; // indica error
 2170              		.loc 1 159 0
 2171 0448 0030E0E3 		mvn	r3, #0
 2172 044c 2B0000EA 		b	.L36
 2173              	.L37:
 160:../gpio.c     **** 
 161:../gpio.c     **** 	if ((rPCONG & (0x3 << pos)) != (0x1 << pos))
 2174              		.loc 1 161 0
 2175 0450 B8309FE5 		ldr	r3, .L41
 2176 0454 002093E5 		ldr	r2, [r3, #0]
 2177 0458 0310A0E3 		mov	r1, #3
 2178 045c 10301BE5 		ldr	r3, [fp, #-16]
 2179 0460 1133A0E1 		mov	r3, r1, asl r3
 2180 0464 032002E0 		and	r2, r2, r3
 2181 0468 0110A0E3 		mov	r1, #1
 2182 046c 10301BE5 		ldr	r3, [fp, #-16]
 2183 0470 1133A0E1 		mov	r3, r1, asl r3
 2184 0474 030052E1 		cmp	r2, r3
 2185 0478 0100000A 		beq	.L38
 162:../gpio.c     **** 		return -1; // indica error
 2186              		.loc 1 162 0
 2187 047c 0030E0E3 		mvn	r3, #0
 2188 0480 1E0000EA 		b	.L36
 2189              	.L38:
 163:../gpio.c     **** 
 164:../gpio.c     **** 	if (val){
 2190              		.loc 1 164 0
 2191 0484 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 2192 0488 000053E3 		cmp	r3, #0
 2193 048c 0D00000A 		beq	.L39
 165:../gpio.c     **** 		// COMPLETAR: poner en rPDATG el bit indicado por pin a 1
 166:../gpio.c     **** 		//rPDATG |= (0x1 << pin);
 167:../gpio.c     **** 		x = rPCONB;
 2194              		.loc 1 167 0
 2195 0490 7C309FE5 		ldr	r3, .L41+4
 2196 0494 003093E5 		ldr	r3, [r3, #0]
 2197 0498 14300BE5 		str	r3, [fp, #-20]
 168:../gpio.c     **** 		x = x | (1<<pin);
 2198              		.loc 1 168 0
 2199 049c 0120A0E3 		mov	r2, #1
 2200 04a0 18301BE5 		ldr	r3, [fp, #-24]
 2201 04a4 1233A0E1 		mov	r3, r2, asl r3
 2202 04a8 0320A0E1 		mov	r2, r3
 2203 04ac 14301BE5 		ldr	r3, [fp, #-20]
 2204 04b0 033082E1 		orr	r3, r2, r3
 2205 04b4 14300BE5 		str	r3, [fp, #-20]
 169:../gpio.c     **** 	    rPCONB = x;
 2206              		.loc 1 169 0
 2207 04b8 54309FE5 		ldr	r3, .L41+4
 2208 04bc 14201BE5 		ldr	r2, [fp, #-20]
 2209 04c0 002083E5 		str	r2, [r3, #0]
 2210 04c4 0C0000EA 		b	.L40
 2211              	.L39:
 170:../gpio.c     **** 
 171:../gpio.c     **** 	}else{
 172:../gpio.c     **** 		// COMPLETAR: poner en rPDATG el bit indicado por pin a 0
 173:../gpio.c     **** 		//rPDATG &= (0x1 << pin);
 174:../gpio.c     **** 		x = rPCONB;
 2212              		.loc 1 174 0
 2213 04c8 44309FE5 		ldr	r3, .L41+4
 2214 04cc 003093E5 		ldr	r3, [r3, #0]
 2215 04d0 14300BE5 		str	r3, [fp, #-20]
 175:../gpio.c     **** 		x = x | (1<<pin);
 2216              		.loc 1 175 0
 2217 04d4 0120A0E3 		mov	r2, #1
 2218 04d8 18301BE5 		ldr	r3, [fp, #-24]
 2219 04dc 1233A0E1 		mov	r3, r2, asl r3
 2220 04e0 0320A0E1 		mov	r2, r3
 2221 04e4 14301BE5 		ldr	r3, [fp, #-20]
 2222 04e8 033082E1 		orr	r3, r2, r3
 2223 04ec 14300BE5 		str	r3, [fp, #-20]
 176:../gpio.c     **** 		rPCONB = x;
 2224              		.loc 1 176 0
 2225 04f0 1C309FE5 		ldr	r3, .L41+4
 2226 04f4 14201BE5 		ldr	r2, [fp, #-20]
 2227 04f8 002083E5 		str	r2, [r3, #0]
 2228              	.L40:
 177:../gpio.c     **** 	}
 178:../gpio.c     **** 	return 0;
 2229              		.loc 1 178 0
 2230 04fc 0030A0E3 		mov	r3, #0
 2231              	.L36:
 179:../gpio.c     **** }
 2232              		.loc 1 179 0
 2233 0500 0300A0E1 		mov	r0, r3
 2234 0504 0CD04BE2 		sub	sp, fp, #12
 2235 0508 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2236 050c 1EFF2FE1 		bx	lr
 2237              	.L42:
 2238              		.align	2
 2239              	.L41:
 2240 0510 4000D201 		.word	30539840
 2241 0514 0800D201 		.word	30539784
 2242              		.cfi_endproc
 2243              	.LFE4:
 2245              		.align	2
 2246              		.global	portG_read
 2248              	portG_read:
 2249              	.LFB5:
 180:../gpio.c     **** 
 181:../gpio.c     **** int portG_read(int pin, enum digital* val)
 182:../gpio.c     **** {
 2250              		.loc 1 182 0
 2251              		.cfi_startproc
 2252              		@ Function supports interworking.
 2253              		@ args = 0, pretend = 0, frame = 16
 2254              		@ frame_needed = 1, uses_anonymous_args = 0
 2255 0518 0DC0A0E1 		mov	ip, sp
 2256              	.LCFI10:
 2257              		.cfi_def_cfa_register 12
 2258 051c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2259 0520 04B04CE2 		sub	fp, ip, #4
 2260              		.cfi_offset 14, -8
 2261              		.cfi_offset 13, -12
 2262              		.cfi_offset 11, -16
 2263              	.LCFI11:
 2264              		.cfi_def_cfa 11, 4
 2265 0524 10D04DE2 		sub	sp, sp, #16
 2266 0528 18000BE5 		str	r0, [fp, #-24]
 2267 052c 1C100BE5 		str	r1, [fp, #-28]
 183:../gpio.c     **** 	int pos = pin*2;
 2268              		.loc 1 183 0
 2269 0530 18301BE5 		ldr	r3, [fp, #-24]
 2270 0534 8330A0E1 		mov	r3, r3, asl #1
 2271 0538 10300BE5 		str	r3, [fp, #-16]
 184:../gpio.c     **** 
 185:../gpio.c     **** 	if (pin < 0 || pin > 7)
 2272              		.loc 1 185 0
 2273 053c 18301BE5 		ldr	r3, [fp, #-24]
 2274 0540 000053E3 		cmp	r3, #0
 2275 0544 020000BA 		blt	.L44
 2276              		.loc 1 185 0 is_stmt 0 discriminator 1
 2277 0548 18301BE5 		ldr	r3, [fp, #-24]
 2278 054c 070053E3 		cmp	r3, #7
 2279 0550 010000DA 		ble	.L45
 2280              	.L44:
 186:../gpio.c     **** 		return -1; // indica error
 2281              		.loc 1 186 0 is_stmt 1
 2282 0554 0030E0E3 		mvn	r3, #0
 2283 0558 190000EA 		b	.L46
 2284              	.L45:
 187:../gpio.c     **** 
 188:../gpio.c     **** 	if (rPCONG & (0x3 << pos))
 2285              		.loc 1 188 0
 2286 055c 70309FE5 		ldr	r3, .L50
 2287 0560 002093E5 		ldr	r2, [r3, #0]
 2288 0564 0310A0E3 		mov	r1, #3
 2289 0568 10301BE5 		ldr	r3, [fp, #-16]
 2290 056c 1133A0E1 		mov	r3, r1, asl r3
 2291 0570 033002E0 		and	r3, r2, r3
 2292 0574 000053E3 		cmp	r3, #0
 2293 0578 0100000A 		beq	.L47
 189:../gpio.c     **** 		return -1; // indica error
 2294              		.loc 1 189 0
 2295 057c 0030E0E3 		mvn	r3, #0
 2296 0580 0F0000EA 		b	.L46
 2297              	.L47:
 190:../gpio.c     **** 	/*COMPLETAR: true si está a 1 en rPDATG el pin indicado por el parámetro pin*/
 191:../gpio.c     **** 
 192:../gpio.c     **** 	if(rPDATG & (0x1 << pos)){
 2298              		.loc 1 192 0
 2299 0584 4C309FE5 		ldr	r3, .L50+4
 2300 0588 002093E5 		ldr	r2, [r3, #0]
 2301 058c 0110A0E3 		mov	r1, #1
 2302 0590 10301BE5 		ldr	r3, [fp, #-16]
 2303 0594 1133A0E1 		mov	r3, r1, asl r3
 2304 0598 033002E0 		and	r3, r2, r3
 2305 059c 000053E3 		cmp	r3, #0
 2306 05a0 0300000A 		beq	.L48
 193:../gpio.c     **** 		*val = HIGH;
 2307              		.loc 1 193 0
 2308 05a4 1C301BE5 		ldr	r3, [fp, #-28]
 2309 05a8 0120A0E3 		mov	r2, #1
 2310 05ac 0020C3E5 		strb	r2, [r3, #0]
 2311 05b0 020000EA 		b	.L49
 2312              	.L48:
 194:../gpio.c     **** 	}else{
 195:../gpio.c     **** 		*val = LOW;
 2313              		.loc 1 195 0
 2314 05b4 1C301BE5 		ldr	r3, [fp, #-28]
 2315 05b8 0020A0E3 		mov	r2, #0
 2316 05bc 0020C3E5 		strb	r2, [r3, #0]
 2317              	.L49:
 196:../gpio.c     **** 	}
 197:../gpio.c     **** 	return 0;
 2318              		.loc 1 197 0
 2319 05c0 0030A0E3 		mov	r3, #0
 2320              	.L46:
 198:../gpio.c     **** }
 2321              		.loc 1 198 0
 2322 05c4 0300A0E1 		mov	r0, r3
 2323 05c8 0CD04BE2 		sub	sp, fp, #12
 2324 05cc 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2325 05d0 1EFF2FE1 		bx	lr
 2326              	.L51:
 2327              		.align	2
 2328              	.L50:
 2329 05d4 4000D201 		.word	30539840
 2330 05d8 4400D201 		.word	30539844
 2331              		.cfi_endproc
 2332              	.LFE5:
 2334              		.align	2
 2335              		.global	portG_conf_pup
 2337              	portG_conf_pup:
 2338              	.LFB6:
 199:../gpio.c     **** 
 200:../gpio.c     **** int portG_conf_pup(int pin, enum enable st)
 201:../gpio.c     **** {
 2339              		.loc 1 201 0
 2340              		.cfi_startproc
 2341              		@ Function supports interworking.
 2342              		@ args = 0, pretend = 0, frame = 16
 2343              		@ frame_needed = 1, uses_anonymous_args = 0
 2344 05dc 0DC0A0E1 		mov	ip, sp
 2345              	.LCFI12:
 2346              		.cfi_def_cfa_register 12
 2347 05e0 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2348 05e4 04B04CE2 		sub	fp, ip, #4
 2349              		.cfi_offset 14, -8
 2350              		.cfi_offset 13, -12
 2351              		.cfi_offset 11, -16
 2352              	.LCFI13:
 2353              		.cfi_def_cfa 11, 4
 2354 05e8 10D04DE2 		sub	sp, sp, #16
 2355 05ec 18000BE5 		str	r0, [fp, #-24]
 2356 05f0 0130A0E1 		mov	r3, r1
 2357 05f4 19304BE5 		strb	r3, [fp, #-25]
 202:../gpio.c     **** 	 volatile unsigned int x = 0;
 2358              		.loc 1 202 0
 2359 05f8 0030A0E3 		mov	r3, #0
 2360 05fc 10300BE5 		str	r3, [fp, #-16]
 203:../gpio.c     **** 
 204:../gpio.c     **** 	if (pin < 0 || pin > 7)
 2361              		.loc 1 204 0
 2362 0600 18301BE5 		ldr	r3, [fp, #-24]
 2363 0604 000053E3 		cmp	r3, #0
 2364 0608 020000BA 		blt	.L53
 2365              		.loc 1 204 0 is_stmt 0 discriminator 1
 2366 060c 18301BE5 		ldr	r3, [fp, #-24]
 2367 0610 070053E3 		cmp	r3, #7
 2368 0614 010000DA 		ble	.L54
 2369              	.L53:
 205:../gpio.c     **** 		return -1; // indica error
 2370              		.loc 1 205 0 is_stmt 1
 2371 0618 0030E0E3 		mvn	r3, #0
 2372 061c 270000EA 		b	.L55
 2373              	.L54:
 206:../gpio.c     **** 
 207:../gpio.c     **** 	if (st != ENABLE && st != DISABLE)
 2374              		.loc 1 207 0
 2375 0620 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 2376 0624 010053E3 		cmp	r3, #1
 2377 0628 0400000A 		beq	.L56
 2378              		.loc 1 207 0 is_stmt 0 discriminator 1
 2379 062c 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 2380 0630 000053E3 		cmp	r3, #0
 2381 0634 0100000A 		beq	.L56
 208:../gpio.c     **** 		return -1; // indica error
 2382              		.loc 1 208 0 is_stmt 1
 2383 0638 0030E0E3 		mvn	r3, #0
 2384 063c 1F0000EA 		b	.L55
 2385              	.L56:
 209:../gpio.c     **** 	if(st == ENABLE){
 2386              		.loc 1 209 0
 2387 0640 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 2388 0644 010053E3 		cmp	r3, #1
 2389 0648 0D00001A 		bne	.L57
 210:../gpio.c     **** 		// COMPLETAR: poner el pin de rPUPG indicado por el parametro pin al valor adecuado,
 211:../gpio.c     **** 		// para activar la resistencia de pull-up
 212:../gpio.c     **** 		x = rPUPG;
 2390              		.loc 1 212 0
 2391 064c 7C309FE5 		ldr	r3, .L59
 2392 0650 003093E5 		ldr	r3, [r3, #0]
 2393 0654 10300BE5 		str	r3, [fp, #-16]
 213:../gpio.c     **** 		x = x | (1<<pin);
 2394              		.loc 1 213 0
 2395 0658 0120A0E3 		mov	r2, #1
 2396 065c 18301BE5 		ldr	r3, [fp, #-24]
 2397 0660 1233A0E1 		mov	r3, r2, asl r3
 2398 0664 0320A0E1 		mov	r2, r3
 2399 0668 10301BE5 		ldr	r3, [fp, #-16]
 2400 066c 033082E1 		orr	r3, r2, r3
 2401 0670 10300BE5 		str	r3, [fp, #-16]
 214:../gpio.c     **** 		rPUPG = x;
 2402              		.loc 1 214 0
 2403 0674 54309FE5 		ldr	r3, .L59
 2404 0678 10201BE5 		ldr	r2, [fp, #-16]
 2405 067c 002083E5 		str	r2, [r3, #0]
 2406 0680 0D0000EA 		b	.L58
 2407              	.L57:
 215:../gpio.c     **** 	}else{
 216:../gpio.c     **** 		// COMPLETAR: poner el pin de rPUPG indicado por el parametro pin al valor adecuado,
 217:../gpio.c     **** 		// para desactivar la resistencia de pull-up
 218:../gpio.c     **** 		x = rPUPG;
 2408              		.loc 1 218 0
 2409 0684 44309FE5 		ldr	r3, .L59
 2410 0688 003093E5 		ldr	r3, [r3, #0]
 2411 068c 10300BE5 		str	r3, [fp, #-16]
 219:../gpio.c     **** 		x = x & ~(1<<pin);
 2412              		.loc 1 219 0
 2413 0690 0120A0E3 		mov	r2, #1
 2414 0694 18301BE5 		ldr	r3, [fp, #-24]
 2415 0698 1233A0E1 		mov	r3, r2, asl r3
 2416 069c 0330E0E1 		mvn	r3, r3
 2417 06a0 0320A0E1 		mov	r2, r3
 2418 06a4 10301BE5 		ldr	r3, [fp, #-16]
 2419 06a8 033002E0 		and	r3, r2, r3
 2420 06ac 10300BE5 		str	r3, [fp, #-16]
 220:../gpio.c     **** 		rPUPG = x;
 2421              		.loc 1 220 0
 2422 06b0 18309FE5 		ldr	r3, .L59
 2423 06b4 10201BE5 		ldr	r2, [fp, #-16]
 2424 06b8 002083E5 		str	r2, [r3, #0]
 2425              	.L58:
 221:../gpio.c     **** 	}
 222:../gpio.c     **** 	return 0;
 2426              		.loc 1 222 0
 2427 06bc 0030A0E3 		mov	r3, #0
 2428              	.L55:
 223:../gpio.c     **** 
 224:../gpio.c     **** }
 2429              		.loc 1 224 0
 2430 06c0 0300A0E1 		mov	r0, r3
 2431 06c4 0CD04BE2 		sub	sp, fp, #12
 2432 06c8 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2433 06cc 1EFF2FE1 		bx	lr
 2434              	.L60:
 2435              		.align	2
 2436              	.L59:
 2437 06d0 4800D201 		.word	30539848
 2438              		.cfi_endproc
 2439              	.LFE6:
 2441              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 gpio.c
C:\Users\Osurac\AppData\Local\Temp\ccq1oRP8.s:1698   .text:00000000 $a
C:\Users\Osurac\AppData\Local\Temp\ccq1oRP8.s:1701   .text:00000000 portB_conf
C:\Users\Osurac\AppData\Local\Temp\ccq1oRP8.s:1801   .text:000000f4 $d
C:\Users\Osurac\AppData\Local\Temp\ccq1oRP8.s:1805   .text:000000f8 $a
C:\Users\Osurac\AppData\Local\Temp\ccq1oRP8.s:1808   .text:000000f8 portB_write
C:\Users\Osurac\AppData\Local\Temp\ccq1oRP8.s:1904   .text:000001e0 $d
C:\Users\Osurac\AppData\Local\Temp\ccq1oRP8.s:1908   .text:000001e4 $a
C:\Users\Osurac\AppData\Local\Temp\ccq1oRP8.s:1911   .text:000001e4 portG_conf
C:\Users\Osurac\AppData\Local\Temp\ccq1oRP8.s:1958   .text:00000244 $d
C:\Users\Osurac\AppData\Local\Temp\ccq1oRP8.s:1964   .text:00000254 $a
C:\Users\Osurac\AppData\Local\Temp\ccq1oRP8.s:2084   .text:000003b8 $d
C:\Users\Osurac\AppData\Local\Temp\ccq1oRP8.s:2088   .text:000003bc $a
C:\Users\Osurac\AppData\Local\Temp\ccq1oRP8.s:2091   .text:000003bc portG_eint_trig
C:\Users\Osurac\AppData\Local\Temp\ccq1oRP8.s:2125   .text:000003ec portG_write
C:\Users\Osurac\AppData\Local\Temp\ccq1oRP8.s:2240   .text:00000510 $d
C:\Users\Osurac\AppData\Local\Temp\ccq1oRP8.s:2245   .text:00000518 $a
C:\Users\Osurac\AppData\Local\Temp\ccq1oRP8.s:2248   .text:00000518 portG_read
C:\Users\Osurac\AppData\Local\Temp\ccq1oRP8.s:2329   .text:000005d4 $d
C:\Users\Osurac\AppData\Local\Temp\ccq1oRP8.s:2334   .text:000005dc $a
C:\Users\Osurac\AppData\Local\Temp\ccq1oRP8.s:2337   .text:000005dc portG_conf_pup
C:\Users\Osurac\AppData\Local\Temp\ccq1oRP8.s:2437   .text:000006d0 $d
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
