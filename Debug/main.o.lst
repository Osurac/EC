   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  21              	.Ltext0:
  22              		.file 1 "../main.c"
 2733              		.align	2
 2736              	RL:
 2737 0000 00000000 		.word	0
 2738 0004 05000000 		.word	5
 2739 0008 00000000 		.word	0
 2740 000c 00000000 		.word	0
 2741 0010 00000000 		.word	0
 2742              		.text
 2743              		.align	2
 2744              		.global	setup
 2746              	setup:
 2747              	.LFB0:
   1:../main.c     **** #include <stdio.h>
   2:../main.c     **** #include "44b.h"
   3:../main.c     **** #include "button.h"
   4:../main.c     **** #include "leds.h"
   5:../main.c     **** #include "utils.h"
   6:../main.c     **** #include "D8Led.h"
   7:../main.c     **** #include "gpio.h"
   8:../main.c     **** 
   9:../main.c     **** struct RLstat {
  10:../main.c     **** 	int moving;
  11:../main.c     **** 	int speed;
  12:../main.c     **** 	int iter;
  13:../main.c     **** 	int direction;
  14:../main.c     **** 	int position;
  15:../main.c     **** };
  16:../main.c     **** 
  17:../main.c     **** static struct RLstat RL = {
  18:../main.c     **** 	.moving = 0,
  19:../main.c     **** 	.speed = 5,
  20:../main.c     **** 	.iter = 0,
  21:../main.c     **** 	.direction = 0,
  22:../main.c     **** 	.position = 0,
  23:../main.c     **** };
  24:../main.c     **** 
  25:../main.c     **** int setup(void)
  26:../main.c     **** {
 2748              		.loc 1 26 0
 2749              		.cfi_startproc
 2750              		@ Function supports interworking.
 2751              		@ args = 0, pretend = 0, frame = 0
 2752              		@ frame_needed = 1, uses_anonymous_args = 0
 2753 0000 0DC0A0E1 		mov	ip, sp
 2754              	.LCFI0:
 2755              		.cfi_def_cfa_register 12
 2756 0004 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2757 0008 04B04CE2 		sub	fp, ip, #4
 2758              		.cfi_offset 14, -8
 2759              		.cfi_offset 13, -12
 2760              		.cfi_offset 11, -16
 2761              	.LCFI1:
 2762              		.cfi_def_cfa 11, 4
  27:../main.c     **** 	leds_init();
 2763              		.loc 1 27 0
 2764 000c FEFFFFEB 		bl	leds_init
  28:../main.c     **** 	D8Led_init();
 2765              		.loc 1 28 0
 2766 0010 FEFFFFEB 		bl	D8Led_init
  29:../main.c     **** 	D8Led_segment(RL.position);
 2767              		.loc 1 29 0
 2768 0014 24309FE5 		ldr	r3, .L2
 2769 0018 103093E5 		ldr	r3, [r3, #16]
 2770 001c 0300A0E1 		mov	r0, r3
 2771 0020 FEFFFFEB 		bl	D8Led_segment
  30:../main.c     **** 
  31:../main.c     **** 	/* Port G: configuración para espera activa */
  32:../main.c     **** 
  33:../main.c     **** 	//COMPLETAR: utilizando el interfaz para el puerto G definido en gpio.h hay
  34:../main.c     **** 	//que configurar los pines 6 y 7 del puerto G como pines de entrada y
  35:../main.c     **** 	//activar las correspondientes resistencias de pull-up
  36:../main.c     **** 	
  37:../main.c     **** 	/*******************************************/
  38:../main.c     **** 
  39:../main.c     **** 	Delay(0);
 2772              		.loc 1 39 0
 2773 0024 0000A0E3 		mov	r0, #0
 2774 0028 FEFFFFEB 		bl	Delay
  40:../main.c     **** 	return 0;
 2775              		.loc 1 40 0
 2776 002c 0030A0E3 		mov	r3, #0
  41:../main.c     **** }
 2777              		.loc 1 41 0
 2778 0030 0300A0E1 		mov	r0, r3
 2779 0034 0CD04BE2 		sub	sp, fp, #12
 2780 0038 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2781 003c 1EFF2FE1 		bx	lr
 2782              	.L3:
 2783              		.align	2
 2784              	.L2:
 2785 0040 00000000 		.word	RL
 2786              		.cfi_endproc
 2787              	.LFE0:
 2789              		.align	2
 2790              		.global	loop
 2792              	loop:
 2793              	.LFB1:
  42:../main.c     **** 
  43:../main.c     **** int loop(void)
  44:../main.c     **** {
 2794              		.loc 1 44 0
 2795              		.cfi_startproc
 2796              		@ Function supports interworking.
 2797              		@ args = 0, pretend = 0, frame = 8
 2798              		@ frame_needed = 1, uses_anonymous_args = 0
 2799 0044 0DC0A0E1 		mov	ip, sp
 2800              	.LCFI2:
 2801              		.cfi_def_cfa_register 12
 2802 0048 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2803 004c 04B04CE2 		sub	fp, ip, #4
 2804              		.cfi_offset 14, -8
 2805              		.cfi_offset 13, -12
 2806              		.cfi_offset 11, -16
 2807              	.LCFI3:
 2808              		.cfi_def_cfa 11, 4
 2809 0050 08D04DE2 		sub	sp, sp, #8
  45:../main.c     **** 	unsigned int buttons = read_button();
 2810              		.loc 1 45 0
 2811 0054 FEFFFFEB 		bl	read_button
 2812 0058 10000BE5 		str	r0, [fp, #-16]
  46:../main.c     **** 
  47:../main.c     **** 	if (buttons & BUT1) {
  48:../main.c     **** 		// COMPLETAR: utilizando la interfaz para los leds definida en leds.h
  49:../main.c     **** 		// hay que conmutar el led1
  50:../main.c     **** 		// También hay que comutar la dirección del movimiento del led rotante
  51:../main.c     **** 		// representado por el campo direction de la variable RL
  52:../main.c     **** 	}
  53:../main.c     **** 
  54:../main.c     **** 	if (buttons & BUT2) {
  55:../main.c     **** 		// COMPLETAR: utilizando la interfaz para los leds definida en leds.h
  56:../main.c     **** 		// hay que conmutar el led2
  57:../main.c     **** 		// También hay que comutar el estado de movimiento del led rotante
  58:../main.c     **** 		// representado por el campo moving de la variable RL, y en caso de
  59:../main.c     **** 		// ponerlo en marcha debemos reiniciar el campo iter al valor del campo
  60:../main.c     **** 		// speed.
  61:../main.c     **** 	}
  62:../main.c     **** 
  63:../main.c     **** 	if (RL.moving) {
 2813              		.loc 1 63 0
 2814 005c 38309FE5 		ldr	r3, .L6
 2815 0060 003093E5 		ldr	r3, [r3, #0]
 2816 0064 000053E3 		cmp	r3, #0
 2817 0068 0400000A 		beq	.L5
  64:../main.c     **** 		RL.iter--;
 2818              		.loc 1 64 0
 2819 006c 28309FE5 		ldr	r3, .L6
 2820 0070 083093E5 		ldr	r3, [r3, #8]
 2821 0074 012043E2 		sub	r2, r3, #1
 2822 0078 1C309FE5 		ldr	r3, .L6
 2823 007c 082083E5 		str	r2, [r3, #8]
 2824              	.L5:
  65:../main.c     **** 		if (RL.iter == 0) {
  66:../main.c     **** 			// COMPLETAR: debemos hacer avanzar el led rotante una posición en
  67:../main.c     **** 			// la dirección indicada por el campo direction de la variable RL.
  68:../main.c     **** 			// La posición actual está representada en el campo position.
  69:../main.c     **** 			// Recordar que queremos un movimiento circular, representado por
  70:../main.c     **** 			// las 6 primeras posiciones en el array Segmentes del display de 8
  71:../main.c     **** 			// segmentos, por lo que position debe estar siempre entre 0 y 5.
  72:../main.c     **** 			
  73:../main.c     **** 		}
  74:../main.c     **** 	}
  75:../main.c     **** 
  76:../main.c     **** 	Delay(2000); // espera de 200ms para que el bucle se repita 5 veces por segundo
 2825              		.loc 1 76 0
 2826 0080 7D0EA0E3 		mov	r0, #2000
 2827 0084 FEFFFFEB 		bl	Delay
  77:../main.c     **** 	return 0;
 2828              		.loc 1 77 0
 2829 0088 0030A0E3 		mov	r3, #0
  78:../main.c     **** }
 2830              		.loc 1 78 0
 2831 008c 0300A0E1 		mov	r0, r3
 2832 0090 0CD04BE2 		sub	sp, fp, #12
 2833 0094 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2834 0098 1EFF2FE1 		bx	lr
 2835              	.L7:
 2836              		.align	2
 2837              	.L6:
 2838 009c 00000000 		.word	RL
 2839              		.cfi_endproc
 2840              	.LFE1:
 2842              		.align	2
 2843              		.global	main
 2845              	main:
 2846              	.LFB2:
  79:../main.c     **** 
  80:../main.c     **** 
  81:../main.c     **** int main(void)
  82:../main.c     **** {
 2847              		.loc 1 82 0
 2848              		.cfi_startproc
 2849              		@ Function supports interworking.
 2850              		@ args = 0, pretend = 0, frame = 0
 2851              		@ frame_needed = 1, uses_anonymous_args = 0
 2852 00a0 0DC0A0E1 		mov	ip, sp
 2853              	.LCFI4:
 2854              		.cfi_def_cfa_register 12
 2855 00a4 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2856 00a8 04B04CE2 		sub	fp, ip, #4
 2857              		.cfi_offset 14, -8
 2858              		.cfi_offset 13, -12
 2859              		.cfi_offset 11, -16
 2860              	.LCFI5:
 2861              		.cfi_def_cfa 11, 4
  83:../main.c     **** 	setup();
 2862              		.loc 1 83 0
 2863 00ac FEFFFFEB 		bl	setup
 2864              	.L9:
  84:../main.c     **** 
  85:../main.c     **** 	while (1) {
  86:../main.c     **** 		loop();
 2865              		.loc 1 86 0 discriminator 1
 2866 00b0 FEFFFFEB 		bl	loop
  87:../main.c     **** 	}
 2867              		.loc 1 87 0 discriminator 1
 2868 00b4 FDFFFFEA 		b	.L9
 2869              		.cfi_endproc
 2870              	.LFE2:
 2872              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\Osurac\AppData\Local\Temp\ccfAdQ8T.s:2733   .data:00000000 $d
C:\Users\Osurac\AppData\Local\Temp\ccfAdQ8T.s:2736   .data:00000000 RL
C:\Users\Osurac\AppData\Local\Temp\ccfAdQ8T.s:2743   .text:00000000 $a
C:\Users\Osurac\AppData\Local\Temp\ccfAdQ8T.s:2746   .text:00000000 setup
C:\Users\Osurac\AppData\Local\Temp\ccfAdQ8T.s:2785   .text:00000040 $d
C:\Users\Osurac\AppData\Local\Temp\ccfAdQ8T.s:2789   .text:00000044 $a
C:\Users\Osurac\AppData\Local\Temp\ccfAdQ8T.s:2792   .text:00000044 loop
C:\Users\Osurac\AppData\Local\Temp\ccfAdQ8T.s:2838   .text:0000009c $d
C:\Users\Osurac\AppData\Local\Temp\ccfAdQ8T.s:2842   .text:000000a0 $a
C:\Users\Osurac\AppData\Local\Temp\ccfAdQ8T.s:2845   .text:000000a0 main
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
leds_init
D8Led_init
D8Led_segment
Delay
read_button
